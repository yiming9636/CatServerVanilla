--- ../src-base/minecraft/net/minecraft/client/renderer/chunk/ChunkCompileTaskGenerator.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/chunk/ChunkCompileTaskGenerator.java
@@ -14,21 +14,21 @@
     private final RenderChunk renderChunk;
     private final ReentrantLock lock = new ReentrantLock();
     private final List<Runnable> listFinishRunnables = Lists.<Runnable>newArrayList();
-    private final ChunkCompileTaskGenerator.Type type;
+    private final Type type;
     private final double distanceSq;
     private RegionRenderCacheBuilder regionRenderCacheBuilder;
     private CompiledChunk compiledChunk;
-    private ChunkCompileTaskGenerator.Status status = ChunkCompileTaskGenerator.Status.PENDING;
+    private Status status = Status.PENDING;
     private boolean finished;
 
-    public ChunkCompileTaskGenerator(RenderChunk renderChunkIn, ChunkCompileTaskGenerator.Type typeIn, double distanceSqIn)
+    public ChunkCompileTaskGenerator(RenderChunk renderChunkIn, Type typeIn, double distanceSqIn)
     {
         this.renderChunk = renderChunkIn;
         this.type = typeIn;
         this.distanceSq = distanceSqIn;
     }
 
-    public ChunkCompileTaskGenerator.Status getStatus()
+    public Status getStatus()
     {
         return this.status;
     }
@@ -58,7 +58,7 @@
         this.regionRenderCacheBuilder = regionRenderCacheBuilderIn;
     }
 
-    public void setStatus(ChunkCompileTaskGenerator.Status statusIn)
+    public void setStatus(Status statusIn)
     {
         this.lock.lock();
 
@@ -78,13 +78,13 @@
 
         try
         {
-            if (this.type == ChunkCompileTaskGenerator.Type.REBUILD_CHUNK && this.status != ChunkCompileTaskGenerator.Status.DONE)
+            if (this.type == Type.REBUILD_CHUNK && this.status != Status.DONE)
             {
                 this.renderChunk.setNeedsUpdate(false);
             }
 
             this.finished = true;
-            this.status = ChunkCompileTaskGenerator.Status.DONE;
+            this.status = Status.DONE;
 
             for (Runnable runnable : this.listFinishRunnables)
             {
@@ -121,7 +121,7 @@
         return this.lock;
     }
 
-    public ChunkCompileTaskGenerator.Type getType()
+    public Type getType()
     {
         return this.type;
     }
