--- ../src-base/minecraft/net/minecraft/advancements/critereon/TickTrigger.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/TickTrigger.java
@@ -15,29 +15,29 @@
 public class TickTrigger implements ICriterionTrigger<TickTrigger.Instance>
 {
     public static final ResourceLocation ID = new ResourceLocation("tick");
-    private final Map<PlayerAdvancements, TickTrigger.Listeners> listeners = Maps.<PlayerAdvancements, TickTrigger.Listeners>newHashMap();
+    private final Map<PlayerAdvancements, Listeners> listeners = Maps.<PlayerAdvancements, Listeners>newHashMap();
 
     public ResourceLocation getId()
     {
         return ID;
     }
 
-    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<TickTrigger.Instance> listener)
+    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        TickTrigger.Listeners ticktrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners ticktrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (ticktrigger$listeners == null)
         {
-            ticktrigger$listeners = new TickTrigger.Listeners(playerAdvancementsIn);
+            ticktrigger$listeners = new Listeners(playerAdvancementsIn);
             this.listeners.put(playerAdvancementsIn, ticktrigger$listeners);
         }
 
         ticktrigger$listeners.add(listener);
     }
 
-    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<TickTrigger.Instance> listener)
+    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        TickTrigger.Listeners ticktrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners ticktrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (ticktrigger$listeners != null)
         {
@@ -55,14 +55,14 @@
         this.listeners.remove(playerAdvancementsIn);
     }
 
-    public TickTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
+    public Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
     {
-        return new TickTrigger.Instance();
+        return new Instance();
     }
 
     public void trigger(EntityPlayerMP player)
     {
-        TickTrigger.Listeners ticktrigger$listeners = this.listeners.get(player.getAdvancements());
+        Listeners ticktrigger$listeners = this.listeners.get(player.getAdvancements());
 
         if (ticktrigger$listeners != null)
         {
@@ -81,7 +81,7 @@
     static class Listeners
         {
             private final PlayerAdvancements playerAdvancements;
-            private final Set<ICriterionTrigger.Listener<TickTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<TickTrigger.Instance>>newHashSet();
+            private final Set<ICriterionTrigger.Listener<Instance>> listeners = Sets.<ICriterionTrigger.Listener<Instance>>newHashSet();
 
             public Listeners(PlayerAdvancements playerAdvancementsIn)
             {
@@ -93,19 +93,19 @@
                 return this.listeners.isEmpty();
             }
 
-            public void add(ICriterionTrigger.Listener<TickTrigger.Instance> listener)
+            public void add(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.add(listener);
             }
 
-            public void remove(ICriterionTrigger.Listener<TickTrigger.Instance> listener)
+            public void remove(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.remove(listener);
             }
 
             public void trigger()
             {
-                for (ICriterionTrigger.Listener<TickTrigger.Instance> listener : Lists.newArrayList(this.listeners))
+                for (ICriterionTrigger.Listener<Instance> listener : Lists.newArrayList(this.listeners))
                 {
                     listener.grantCriterion(this.playerAdvancements);
                 }
