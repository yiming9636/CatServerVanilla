--- ../src-base/minecraft/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/ItemDurabilityTrigger.java
@@ -17,29 +17,29 @@
 public class ItemDurabilityTrigger implements ICriterionTrigger<ItemDurabilityTrigger.Instance>
 {
     private static final ResourceLocation ID = new ResourceLocation("item_durability_changed");
-    private final Map<PlayerAdvancements, ItemDurabilityTrigger.Listeners> listeners = Maps.<PlayerAdvancements, ItemDurabilityTrigger.Listeners>newHashMap();
+    private final Map<PlayerAdvancements, Listeners> listeners = Maps.<PlayerAdvancements, Listeners>newHashMap();
 
     public ResourceLocation getId()
     {
         return ID;
     }
 
-    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance> listener)
+    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        ItemDurabilityTrigger.Listeners itemdurabilitytrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners itemdurabilitytrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (itemdurabilitytrigger$listeners == null)
         {
-            itemdurabilitytrigger$listeners = new ItemDurabilityTrigger.Listeners(playerAdvancementsIn);
+            itemdurabilitytrigger$listeners = new Listeners(playerAdvancementsIn);
             this.listeners.put(playerAdvancementsIn, itemdurabilitytrigger$listeners);
         }
 
         itemdurabilitytrigger$listeners.add(listener);
     }
 
-    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance> listener)
+    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        ItemDurabilityTrigger.Listeners itemdurabilitytrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners itemdurabilitytrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (itemdurabilitytrigger$listeners != null)
         {
@@ -57,17 +57,17 @@
         this.listeners.remove(playerAdvancementsIn);
     }
 
-    public ItemDurabilityTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
+    public Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
     {
         ItemPredicate itempredicate = ItemPredicate.deserialize(json.get("item"));
         MinMaxBounds minmaxbounds = MinMaxBounds.deserialize(json.get("durability"));
         MinMaxBounds minmaxbounds1 = MinMaxBounds.deserialize(json.get("delta"));
-        return new ItemDurabilityTrigger.Instance(itempredicate, minmaxbounds, minmaxbounds1);
+        return new Instance(itempredicate, minmaxbounds, minmaxbounds1);
     }
 
     public void trigger(EntityPlayerMP player, ItemStack itemIn, int newDurability)
     {
-        ItemDurabilityTrigger.Listeners itemdurabilitytrigger$listeners = this.listeners.get(player.getAdvancements());
+        Listeners itemdurabilitytrigger$listeners = this.listeners.get(player.getAdvancements());
 
         if (itemdurabilitytrigger$listeners != null)
         {
@@ -109,7 +109,7 @@
     static class Listeners
         {
             private final PlayerAdvancements playerAdvancements;
-            private final Set<ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance>>newHashSet();
+            private final Set<ICriterionTrigger.Listener<Instance>> listeners = Sets.<ICriterionTrigger.Listener<Instance>>newHashSet();
 
             public Listeners(PlayerAdvancements playerAdvancementsIn)
             {
@@ -121,27 +121,27 @@
                 return this.listeners.isEmpty();
             }
 
-            public void add(ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance> listener)
+            public void add(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.add(listener);
             }
 
-            public void remove(ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance> listener)
+            public void remove(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.remove(listener);
             }
 
             public void trigger(ItemStack item, int newDurability)
             {
-                List<ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance>> list = null;
+                List<ICriterionTrigger.Listener<Instance>> list = null;
 
-                for (ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance> listener : this.listeners)
+                for (ICriterionTrigger.Listener<Instance> listener : this.listeners)
                 {
-                    if (((ItemDurabilityTrigger.Instance)listener.getCriterionInstance()).test(item, newDurability))
+                    if (((Instance)listener.getCriterionInstance()).test(item, newDurability))
                     {
                         if (list == null)
                         {
-                            list = Lists.<ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance>>newArrayList();
+                            list = Lists.<ICriterionTrigger.Listener<Instance>>newArrayList();
                         }
 
                         list.add(listener);
@@ -150,7 +150,7 @@
 
                 if (list != null)
                 {
-                    for (ICriterionTrigger.Listener<ItemDurabilityTrigger.Instance> listener1 : list)
+                    for (ICriterionTrigger.Listener<Instance> listener1 : list)
                     {
                         listener1.grantCriterion(this.playerAdvancements);
                     }
