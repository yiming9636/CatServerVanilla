--- ../src-base/minecraft/net/minecraft/util/math/BlockPos.java
+++ ../src-work/minecraft/net/minecraft/util/math/BlockPos.java
@@ -238,30 +238,30 @@
         return this;
     }
 
-    public static Iterable<BlockPos.MutableBlockPos> getAllInBoxMutable(BlockPos from, BlockPos to)
+    public static Iterable<MutableBlockPos> getAllInBoxMutable(BlockPos from, BlockPos to)
     {
         return getAllInBoxMutable(Math.min(from.getX(), to.getX()), Math.min(from.getY(), to.getY()), Math.min(from.getZ(), to.getZ()), Math.max(from.getX(), to.getX()), Math.max(from.getY(), to.getY()), Math.max(from.getZ(), to.getZ()));
     }
 
-    public static Iterable<BlockPos.MutableBlockPos> getAllInBoxMutable(final int x1, final int y1, final int z1, final int x2, final int y2, final int z2)
+    public static Iterable<MutableBlockPos> getAllInBoxMutable(final int x1, final int y1, final int z1, final int x2, final int y2, final int z2)
     {
-        return new Iterable<BlockPos.MutableBlockPos>()
+        return new Iterable<MutableBlockPos>()
         {
-            public Iterator<BlockPos.MutableBlockPos> iterator()
+            public Iterator<MutableBlockPos> iterator()
             {
-                return new AbstractIterator<BlockPos.MutableBlockPos>()
+                return new AbstractIterator<MutableBlockPos>()
                 {
-                    private BlockPos.MutableBlockPos pos;
-                    protected BlockPos.MutableBlockPos computeNext()
+                    private MutableBlockPos pos;
+                    protected MutableBlockPos computeNext()
                     {
                         if (this.pos == null)
                         {
-                            this.pos = new BlockPos.MutableBlockPos(x1, y1, z1);
+                            this.pos = new MutableBlockPos(x1, y1, z1);
                             return this.pos;
                         }
                         else if (this.pos.x == x2 && this.pos.y == y2 && this.pos.z == z2)
                         {
-                            return (BlockPos.MutableBlockPos)this.endOfData();
+                            return (MutableBlockPos)this.endOfData();
                         }
                         else
                         {
@@ -348,7 +348,7 @@
                 return this.z;
             }
 
-            public BlockPos.MutableBlockPos setPos(int xIn, int yIn, int zIn)
+            public MutableBlockPos setPos(int xIn, int yIn, int zIn)
             {
                 this.x = xIn;
                 this.y = yIn;
@@ -356,7 +356,7 @@
                 return this;
             }
 
-            public BlockPos.MutableBlockPos setPos(double xIn, double yIn, double zIn)
+            public MutableBlockPos setPos(double xIn, double yIn, double zIn)
             {
                 return this.setPos(MathHelper.floor(xIn), MathHelper.floor(yIn), MathHelper.floor(zIn));
             }
@@ -367,17 +367,17 @@
                 return this.setPos(entityIn.posX, entityIn.posY, entityIn.posZ);
             }
 
-            public BlockPos.MutableBlockPos setPos(Vec3i vec)
+            public MutableBlockPos setPos(Vec3i vec)
             {
                 return this.setPos(vec.getX(), vec.getY(), vec.getZ());
             }
 
-            public BlockPos.MutableBlockPos move(EnumFacing facing)
+            public MutableBlockPos move(EnumFacing facing)
             {
                 return this.move(facing, 1);
             }
 
-            public BlockPos.MutableBlockPos move(EnumFacing facing, int n)
+            public MutableBlockPos move(EnumFacing facing, int n)
             {
                 return this.setPos(this.x + facing.getFrontOffsetX() * n, this.y + facing.getFrontOffsetY() * n, this.z + facing.getFrontOffsetZ() * n);
             }
@@ -393,22 +393,22 @@
             }
         }
 
-    public static final class PooledMutableBlockPos extends BlockPos.MutableBlockPos
+    public static final class PooledMutableBlockPos extends MutableBlockPos
         {
             private boolean released;
-            private static final List<BlockPos.PooledMutableBlockPos> POOL = Lists.<BlockPos.PooledMutableBlockPos>newArrayList();
+            private static final List<PooledMutableBlockPos> POOL = Lists.<PooledMutableBlockPos>newArrayList();
 
             private PooledMutableBlockPos(int xIn, int yIn, int zIn)
             {
                 super(xIn, yIn, zIn);
             }
 
-            public static BlockPos.PooledMutableBlockPos retain()
+            public static PooledMutableBlockPos retain()
             {
                 return retain(0, 0, 0);
             }
 
-            public static BlockPos.PooledMutableBlockPos retain(double xIn, double yIn, double zIn)
+            public static PooledMutableBlockPos retain(double xIn, double yIn, double zIn)
             {
                 return retain(MathHelper.floor(xIn), MathHelper.floor(yIn), MathHelper.floor(zIn));
             }
@@ -419,13 +419,13 @@
                 return retain(vec.getX(), vec.getY(), vec.getZ());
             }
 
-            public static BlockPos.PooledMutableBlockPos retain(int xIn, int yIn, int zIn)
+            public static PooledMutableBlockPos retain(int xIn, int yIn, int zIn)
             {
                 synchronized (POOL)
                 {
                     if (!POOL.isEmpty())
                     {
-                        BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = POOL.remove(POOL.size() - 1);
+                        PooledMutableBlockPos blockpos$pooledmutableblockpos = POOL.remove(POOL.size() - 1);
 
                         if (blockpos$pooledmutableblockpos != null && blockpos$pooledmutableblockpos.released)
                         {
@@ -436,7 +436,7 @@
                     }
                 }
 
-                return new BlockPos.PooledMutableBlockPos(xIn, yIn, zIn);
+                return new PooledMutableBlockPos(xIn, yIn, zIn);
             }
 
             public void release()
@@ -452,7 +452,7 @@
                 }
             }
 
-            public BlockPos.PooledMutableBlockPos setPos(int xIn, int yIn, int zIn)
+            public PooledMutableBlockPos setPos(int xIn, int yIn, int zIn)
             {
                 if (this.released)
                 {
@@ -460,33 +460,33 @@
                     this.released = false;
                 }
 
-                return (BlockPos.PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
+                return (PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
             }
 
             @SideOnly(Side.CLIENT)
             public BlockPos.PooledMutableBlockPos setPos(Entity entityIn)
             {
-                return (BlockPos.PooledMutableBlockPos)super.setPos(entityIn);
+                return (PooledMutableBlockPos)super.setPos(entityIn);
             }
 
-            public BlockPos.PooledMutableBlockPos setPos(double xIn, double yIn, double zIn)
+            public PooledMutableBlockPos setPos(double xIn, double yIn, double zIn)
             {
-                return (BlockPos.PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
+                return (PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
             }
 
-            public BlockPos.PooledMutableBlockPos setPos(Vec3i vec)
+            public PooledMutableBlockPos setPos(Vec3i vec)
             {
-                return (BlockPos.PooledMutableBlockPos)super.setPos(vec);
+                return (PooledMutableBlockPos)super.setPos(vec);
             }
 
-            public BlockPos.PooledMutableBlockPos move(EnumFacing facing)
+            public PooledMutableBlockPos move(EnumFacing facing)
             {
-                return (BlockPos.PooledMutableBlockPos)super.move(facing);
+                return (PooledMutableBlockPos)super.move(facing);
             }
 
-            public BlockPos.PooledMutableBlockPos move(EnumFacing facing, int n)
+            public PooledMutableBlockPos move(EnumFacing facing, int n)
             {
-                return (BlockPos.PooledMutableBlockPos)super.move(facing, n);
+                return (PooledMutableBlockPos)super.move(facing, n);
             }
         }
 }
