--- ../src-base/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
+++ ../src-work/minecraft/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -1,23 +1,21 @@
 package net.minecraft.util;
 
+import catserver.server.utils.ThreadSafeList;
 import com.google.common.collect.Iterators;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import java.util.AbstractSet;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import io.netty.util.internal.ConcurrentSet;
 
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
+
 public class ClassInheritanceMultiMap<T> extends AbstractSet<T>
 {
-    private static final Set < Class<? >> ALL_KNOWN = Sets. < Class<? >> newHashSet();
-    private final Map < Class<?>, List<T >> map = Maps. < Class<?>, List<T >> newHashMap();
-    private final Set < Class<? >> knownKeys = Sets. < Class<? >> newIdentityHashSet();
+    // Forge: Use concurrent collection to allow creating chunks from multiple threads safely
+    private static final Set < Class<? >> ALL_KNOWN = Collections.newSetFromMap(new ConcurrentHashMap<>());
+    private final Map < Class<?>, List<T >> map = new ConcurrentHashMap<>();
+    private final Set < Class<? >> knownKeys = new ConcurrentSet<>();
     private final Class<T> baseClass;
-    private final List<T> values = Lists.<T>newArrayList();
+    private final List<T> values = new ThreadSafeList<>(false);
 
     public ClassInheritanceMultiMap(Class<T> baseClassIn)
     {
@@ -78,11 +76,13 @@
 
     private void addForClass(T value, Class<?> parentClass)
     {
-        List<T> list = (List)this.map.get(parentClass);
+        List<T> list = this.map.get(parentClass);
 
         if (list == null)
         {
-            this.map.put(parentClass, Lists.newArrayList(value));
+            List<T> ll = new CopyOnWriteArrayList<>();
+            ll.add(value);
+            this.map.put(parentClass, ll);
         }
         else
         {
@@ -92,16 +92,15 @@
 
     public boolean remove(Object p_remove_1_)
     {
-        T t = (T)p_remove_1_;
         boolean flag = false;
 
         for (Class<?> oclass : this.knownKeys)
         {
-            if (oclass.isAssignableFrom(t.getClass()))
+            if (oclass.isAssignableFrom(p_remove_1_.getClass()))
             {
-                List<T> list = (List)this.map.get(oclass);
+                List<T> list = this.map.get(oclass);
 
-                if (list != null && list.remove(t))
+                if (list != null && list.remove(p_remove_1_))
                 {
                     flag = true;
                 }
@@ -118,28 +117,24 @@
 
     public <S> Iterable<S> getByClass(final Class<S> clazz)
     {
-        return new Iterable<S>()
-        {
-            public Iterator<S> iterator()
-            {
-                List<T> list = (List)ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
+        return () -> {
+            List<T> list = ClassInheritanceMultiMap.this.map.get(ClassInheritanceMultiMap.this.initializeClassLookup(clazz));
 
-                if (list == null)
-                {
-                    return Collections.<S>emptyIterator();
-                }
-                else
-                {
-                    Iterator<T> iterator = list.iterator();
-                    return Iterators.filter(iterator, clazz);
-                }
+            if (list == null)
+            {
+                return Collections.emptyIterator();
             }
+            else
+            {
+                Iterator<T> iterator = list.iterator();
+                return Iterators.filter(iterator, clazz);
+            }
         };
     }
 
-    public Iterator<T> iterator()
+    public synchronized Iterator<T> iterator()
     {
-        return (Iterator<T>)(this.values.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.values.iterator()));
+        return this.values.isEmpty() ? Collections.emptyIterator() : Iterators.unmodifiableIterator(this.values.iterator());
     }
 
     public int size()
