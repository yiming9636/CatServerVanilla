--- ../src-base/minecraft/net/minecraft/util/IntHashMap.java
+++ ../src-work/minecraft/net/minecraft/util/IntHashMap.java
@@ -4,7 +4,7 @@
 
 public class IntHashMap<V>
 {
-    private transient IntHashMap.Entry<V>[] slots = new IntHashMap.Entry[16];
+    private transient Entry<V>[] slots = new Entry[16];
     private transient int count;
     private int threshold = 12;
     private final float growFactor = 0.75F;
@@ -25,7 +25,7 @@
     {
         int i = computeHash(hashEntry);
 
-        for (IntHashMap.Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
+        for (Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
         {
             if (entry.hashEntry == hashEntry)
             {
@@ -46,7 +46,7 @@
     {
         int i = computeHash(hashEntry);
 
-        for (IntHashMap.Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
+        for (Entry<V> entry = this.slots[getSlotIndex(i, this.slots.length)]; entry != null; entry = entry.nextEntry)
         {
             if (entry.hashEntry == hashEntry)
             {
@@ -62,7 +62,7 @@
         int i = computeHash(hashEntry);
         int j = getSlotIndex(i, this.slots.length);
 
-        for (IntHashMap.Entry<V> entry = this.slots[j]; entry != null; entry = entry.nextEntry)
+        for (Entry<V> entry = this.slots[j]; entry != null; entry = entry.nextEntry)
         {
             if (entry.hashEntry == hashEntry)
             {
@@ -76,7 +76,7 @@
 
     private void grow(int p_76047_1_)
     {
-        IntHashMap.Entry<V>[] entry = this.slots;
+        Entry<V>[] entry = this.slots;
         int i = entry.length;
 
         if (i == 1073741824)
@@ -85,21 +85,21 @@
         }
         else
         {
-            IntHashMap.Entry<V>[] entry1 = new IntHashMap.Entry[p_76047_1_];
+            Entry<V>[] entry1 = new Entry[p_76047_1_];
             this.copyTo(entry1);
             this.slots = entry1;
             this.threshold = (int)((float)p_76047_1_ * this.growFactor);
         }
     }
 
-    private void copyTo(IntHashMap.Entry<V>[] p_76048_1_)
+    private void copyTo(Entry<V>[] p_76048_1_)
     {
-        IntHashMap.Entry<V>[] entry = this.slots;
+        Entry<V>[] entry = this.slots;
         int i = p_76048_1_.length;
 
         for (int j = 0; j < entry.length; ++j)
         {
-            IntHashMap.Entry<V> entry1 = entry[j];
+            Entry<V> entry1 = entry[j];
 
             if (entry1 != null)
             {
@@ -107,7 +107,7 @@
 
                 while (true)
                 {
-                    IntHashMap.Entry<V> entry2 = entry1.nextEntry;
+                    Entry<V> entry2 = entry1.nextEntry;
                     int k = getSlotIndex(entry1.slotHash, i);
                     entry1.nextEntry = p_76048_1_[k];
                     p_76048_1_[k] = entry1;
@@ -125,7 +125,7 @@
     @Nullable
     public V removeObject(int o)
     {
-        IntHashMap.Entry<V> entry = this.removeEntry(o);
+        Entry<V> entry = this.removeEntry(o);
         return (V)(entry == null ? null : entry.valueEntry);
     }
 
@@ -134,9 +134,9 @@
     {
         int i = computeHash(p_76036_1_);
         int j = getSlotIndex(i, this.slots.length);
-        IntHashMap.Entry<V> entry = this.slots[j];
-        IntHashMap.Entry<V> entry1;
-        IntHashMap.Entry<V> entry2;
+        Entry<V> entry = this.slots[j];
+        Entry<V> entry1;
+        Entry<V> entry2;
 
         for (entry1 = entry; entry1 != null; entry1 = entry2)
         {
@@ -166,7 +166,7 @@
 
     public void clearMap()
     {
-        IntHashMap.Entry<V>[] entry = this.slots;
+        Entry<V>[] entry = this.slots;
 
         for (int i = 0; i < entry.length; ++i)
         {
@@ -178,8 +178,8 @@
 
     private void insert(int p_76040_1_, int p_76040_2_, V p_76040_3_, int p_76040_4_)
     {
-        IntHashMap.Entry<V> entry = this.slots[p_76040_4_];
-        this.slots[p_76040_4_] = new IntHashMap.Entry(p_76040_1_, p_76040_2_, p_76040_3_, entry);
+        Entry<V> entry = this.slots[p_76040_4_];
+        this.slots[p_76040_4_] = new Entry(p_76040_1_, p_76040_2_, p_76040_3_, entry);
 
         if (this.count++ >= this.threshold)
         {
@@ -191,10 +191,10 @@
         {
             final int hashEntry;
             V valueEntry;
-            IntHashMap.Entry<V> nextEntry;
+            Entry<V> nextEntry;
             final int slotHash;
 
-            Entry(int p_i1552_1_, int p_i1552_2_, V p_i1552_3_, IntHashMap.Entry<V> p_i1552_4_)
+            Entry(int p_i1552_1_, int p_i1552_2_, V p_i1552_3_, Entry<V> p_i1552_4_)
             {
                 this.valueEntry = p_i1552_3_;
                 this.nextEntry = p_i1552_4_;
@@ -220,7 +220,7 @@
                 }
                 else
                 {
-                    IntHashMap.Entry<V> entry = (IntHashMap.Entry)p_equals_1_;
+                    Entry<V> entry = (Entry)p_equals_1_;
 
                     if (this.hashEntry == entry.hashEntry)
                     {
